N Queens 

import java.util.Scanner;

public class NQueens {
    private static boolean solutionFound = false;

    // Function to check if placing a queen is safe
    public static boolean isSafe(char board[][], int row, int col) {
        // Check vertical upwards
        for (int i = row - 1; i >= 0; i--) {
            if (board[i][col] == 'Q') {
                return false;
            }
        }

        // Check diagonal left upwards
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        // Check diagonal right upwards
        for (int i = row - 1, j = col + 1; i >= 0 && j < board.length; i--, j++) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        return true;
    }

    // Function to solve the N-Queens problem using backtracking
    public static void nQueens(char board[][], int row) {
        // Base case: All queens are placed
        if (row == board.length) {
            solutionFound = true; // Mark that at least one solution exists
            printBoard(board);
            return;
        }

        // Try placing a queen in each column of the current row
        for (int j = 0; j < board.length; j++) {
            if (isSafe(board, row, j)) {
                board[row][j] = 'Q';  // Place the queen
                nQueens(board, row + 1); // Recursively place the rest of the queens
                board[row][j] = '.';  // Backtrack
            }
        }
    }

    // Function to print the chess board
    public static void printBoard(char board[][]) {
        System.out.println("------------ Chess Board -------------");
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the value of n: ");
        int n = sc.nextInt();

        char board[][] = new char[n][n];
        // Initialize the board with '.'
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = '.';
            }
        }

        nQueens(board, 0);
        

        if (!solutionFound) {
            System.out.println("No solution exists for " + n + " queens.");
        }

        sc.close();
    }
}

Time complexity = O(n!)
Space complexity - O(n)