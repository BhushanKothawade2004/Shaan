Crossover Mutation Tsp


import java.util.Arrays;
import java.util.Random;

import java.util.*;
import java.util.Arrays;

public class crossoverMutation {
   public static int[] crossover(int[] parent1, int[] parent2) {
      int n = parent1.length;
      int[] offspring = new int[n];
      Arrays.fill(offspring, -1); // Initialize offspring with -1
      Set<Integer> usedGenes = new HashSet<>(); // Track genes already added to offspring
      Random rand = new Random();

      // Select a random crossover point
      int crossoverPoint = rand.nextInt(n);

      // Copy the first part from parent1 to offspring
      for (int i = 0; i < crossoverPoint; i++) {
         offspring[i] = parent1[i];
         usedGenes.add(parent1[i]);
      }

      // Fill the remaining part from parent2
      int currentIndex = crossoverPoint;
      for (int i = 0; i < n; i++) {
         int gene = parent2[i];
         if (!usedGenes.contains(gene)) {
            offspring[currentIndex] = gene;
            usedGenes.add(gene);
            currentIndex++;
         }
      }

      return offspring;
   }

   public static void main(String[] args) {
      // Example of crossover for TSP
      int[] parent1 = { 0, 1, 2, 3, 4 };
      int[] parent2 = { 4, 3, 2, 1, 0 };

      System.out.println("Parent 1: ");
      for (int i : parent1) {
         System.out.print(i + " ");
      }

      System.out.println("\nParent 2: ");
      for (int i : parent2) {
         System.out.print(i + " ");
      }

      int[] offspring = crossover(parent1, parent2);
      System.out.println("\nOffspring: ");
      for (int i : offspring) {
         System.out.print(i + " ");
      }

      System.out.println();
   }
}


The type of crossover implemented in the given code is Partially Mapped Crossover (PMX).

Explanation of the Crossover Technique in the Code
Definition of PMX (Partially Mapped Crossover):

PMX combines genetic material from two parent chromosomes while maintaining the validity of the offspring (no repeated or missing elements).
It is commonly used in problems like the Traveling Salesperson Problem (TSP), where the solution is represented as a permutation of cities.
Steps Observed in the Code:

Crossover Point Selection: A random crossover point is selected.
Preservation from Parent 1: The part of the chromosome from the start up to the crossover point is directly copied from parent1 to the offspring.
Mapping from Parent 2: For the remaining part, elements from parent2 are copied, but duplicates are avoided. This ensures a valid permutation in the offspring.
Characteristics of PMX in the Code:

Mapping Process: The code ensures that no duplicate genes are added by checking if the gene from parent2 is already present in the offspring before adding it.
Preservation of Parent Features: The offspring retains the order of the genes from both parents as much as possible.
Example Walkthrough of the Code
Inputs:
Parent 1: [0, 1, 2, 3, 4]
Parent 2: [4, 3, 2, 1, 0]
Crossover Point (Randomly Selected): Let’s assume crossoverPoint = 2.
Process:
Copy from Parent 1 (up to crossoverPoint):
Offspring: [0, 1, -1, -1, -1]
Fill from Parent 2 (remaining genes, avoiding duplicates):
Start checking from parent2[0]:
4 is not in [0, 1] → Add it: [0, 1, 4, -1, -1]
3 is not in [0, 1, 4] → Add it: [0, 1, 4, 3, -1]
2 is not in [0, 1, 4, 3] → Add it: [0, 1, 4, 3, 2]
Output:
Offspring: [0, 1, 4, 3, 2]
Why PMX is Used
PMX ensures that:
The offspring is a valid permutation (essential for TSP solutions).
Genetic diversity is maintained.
Features from both parents are preserved, helping with efficient exploration of the solution space.
Conclusion
The type of crossover applied in the code is Partially Mapped Crossover (PMX), which is particularly suited for permutation-based problems like the TSP.


Explanation of Steps:
Initialize the offspring array: An array offspring is created with the same length as the parents and filled with -1 to indicate that no genes have been assigned yet.
Random crossover point: A random point between 0 and n-1 is selected to decide where the crossover should happen between the two parents.
Copying genes from parent1: The first part of the offspring array is filled with genes from parent1 up to the crossover point.
Copying genes from parent2: The second part of the offspring array is filled with genes from parent2, but duplicates are avoided using a Set.
Return the offspring: After both parents contribute their genes, the offspring is returned.



Overall Time Complexity:
The most expensive steps are the two loops that run O(n) times, so the total time complexity of the crossover function is O(n).

Overall Space Complexity:
The space complexity is determined by the space used to store the offspring array and the usedGenes set, both of which take O(n) space.
Thus, the overall space complexity of the crossover function is O(n).