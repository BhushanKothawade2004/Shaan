Matrix Multiplication 

public class MatrixMultiply {

    // Function for sequential matrix multiplication
    public static int[][] multiplySequential(int[][] matrixA, int[][] matrixB) {
        int rowsA = matrixA.length;
        int colsA = matrixA[0].length;
        int colsB = matrixB[0].length;
        int[][] result = new int[rowsA][colsB];

        // Perform matrix multiplication (Sequential)
        for (int i = 0; i < rowsA; i++) {
            for (int j = 0; j < colsB; j++) {
                for (int k = 0; k < colsA; k++) {
                    result[i][j] += matrixA[i][k] * matrixB[k][j];
                }
            }
        }
        return result;
    }

    // Function for multithreaded matrix multiplication
    public static int[][] multiplyMultithreaded(int[][] matrixA, int[][] matrixB) throws InterruptedException {
        int rowsA = matrixA.length;
        int colsA = matrixA[0].length;
        int colsB = matrixB[0].length;
        int[][] result = new int[rowsA][colsB];

        // Create threads for each row of the result matrix
        Thread[] threads = new Thread[rowsA];

        for (int i = 0; i < rowsA; i++) {
            final int row = i; // Final variable to be used in the thread
            threads[i] = new Thread(() -> {
                for (int j = 0; j < colsB; j++) {
                    for (int k = 0; k < colsA; k++) {
                        result[row][j] += matrixA[row][k] * matrixB[k][j];
                    }
                }
            });
            threads[i].start(); // Start each thread
        }

        // Wait for all threads to finish
        for (int i = 0; i < rowsA; i++) {
            threads[i].join();
        }

        return result;
    }

    // Method to print the matrix
    public static void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int val : row) {
                System.out.print(val + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) throws InterruptedException {
        // Define two example matrices for multiplication
        int[][] matrixA = {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };
        int[][] matrixB = {
                {9, 8, 7},
                {6, 5, 4},
                {3, 2, 1}
        };

        // Sequential matrix multiplication
        long startTime = System.nanoTime(); // Start time in nanoseconds
        int[][] sequentialResult = multiplySequential(matrixA, matrixB);
        long endTime = System.nanoTime(); // End time in nanoseconds
        System.out.println("Sequential Multiplication Result:");
        printMatrix(sequentialResult);
        System.out.println("Time taken for Sequential Multiplication: " + (endTime - startTime) + " ns");

        // Multithreaded matrix multiplication
        startTime = System.nanoTime(); // Start time in nanoseconds
        int[][] multithreadedResult = multiplyMultithreaded(matrixA, matrixB);
        endTime = System.nanoTime(); // End time in nanoseconds
        System.out.println("Multithreaded Multiplication Result:");
        printMatrix(multithreadedResult);
        System.out.println("Time taken for Multithreaded Multiplication: " + (endTime - startTime) + " ns");
    }
}


Algorithm for Sequential Matrix Multiplication
Input:

Two matrices A (of size m x n) and B (of size n x p).
A result matrix C of size m x p, which will hold the multiplication result.
Process:

Initialize an empty result matrix C of size m x p with all values set to zero.
Loop over all rows i of matrix A:
For each row i, loop over all columns j of matrix B:
For each element in row i of matrix A and column j of matrix B, compute the dot product:
C[i][j] += A[i][k] * B[k][j] for each k from 0 to n-1.
After the loops complete, the result matrix C will contain the product of matrices A and B.
Output:

The resulting matrix C is the product of matrices A and B.
Algorithm for Multithreaded Matrix Multiplication
Input:

Two matrices A (of size m x n) and B (of size n x p).
A result matrix C of size m x p, which will hold the multiplication result.
Process:

Initialize an empty result matrix C of size m x p with all values set to zero.
Create a thread pool where each thread will handle one row of the result matrix C.
For each row i of matrix A:
Assign a new thread to compute the product of row i of matrix A with all columns of matrix B.
Inside the thread:
Loop over each column j of matrix B:
For each element in row i of matrix A and column j of matrix B, compute the dot product:
C[i][j] += A[i][k] * B[k][j] for each k from 0 to n-1.
Wait for all threads to complete (using join() on each thread).
Output:

The resulting matrix C is the product of matrices A and B.
Steps in Detail:
Sequential Matrix Multiplication:
Initialize Result Matrix:

Create a result matrix C with dimensions m x p and initialize it with zeros.
Triple Nested Loop:

The outer two loops iterate over the rows of A and columns of B (indexed by i and j).
The inner loop (indexed by k) computes the dot product for a given element in the result matrix C[i][j] by summing the products of corresponding elements in A[i][k] and B[k][j].
Return the Result Matrix:
After completing all iterations, return the result matrix C.
Multithreaded Matrix Multiplication:
Initialize Result Matrix:
Create a result matrix C with dimensions m x p and initialize it with zeros.
Thread Creation:
For each row i in matrix A, create a new thread to compute the corresponding row of the result matrix C.
Thread Execution:
Inside each thread, perform the same dot product calculation as in the sequential method (nested loops over j and k).
Wait for Threads:
Use join() on each thread to ensure all threads complete before returning the final result matrix.
Return the Result Matrix:
After all threads have finished executing, return the result matrix C.

Time Complexity:

O(m × n × p)

Where:

m = number of rows in matrix A
n = number of columns in matrix A (also the number of rows in matrix B)
p = number of columns in matrix B
This complexity arises from the fact that each element in the resulting matrix C requires a summation of n products.

Space Complexity:

To store the matrices:

Matrix A: O(m × n)
Matrix B: O(n × p)
Result matrix C: O(m × p)
Total Space Complexity:

O(m × n + n × p + m × p)

In the worst case, this simplifies to:

O(m × n + n × p)




